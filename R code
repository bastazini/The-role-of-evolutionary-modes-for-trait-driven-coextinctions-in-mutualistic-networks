####################################
# The role of evolutionary modes for trait driven coextinctions in mutualistic networks network
#Author: Vinicius Bastazini et al.
#Ecological Modelling. 2022. 
#https://doi.org/10.1016/j.ecolmodel.2022.109983
#Last updated: 2017_07_26
#reviwed: 2022_03_23
#Contact: bastazini.vinicius@gmail.com
####################################

##Run the main simulation for each level of phylogenetic signal.
#packages
require(geiger)
require(plotrix)
require(picante)
require(bipartite)

#rm(list=ls())

# Specify the number of runs, the power of phylogenetic signal and the level of trait complementary

runs <- 1000
power_H <- c(0.0001,1,2,5)
complementarity <- c(0.25, 0.5, 1)

## must be run 4 times, one for each scenario of power_L lines 74 and 75

n_niveis <- length(power_H)
n_complementarity <- length(complementarity)

#organizing results
# RESULTADOS <- matrix(NA, runs * n_complementarity, (n_niveis * 3)+2)
# nomes<-expand.grid(c("distinc","trait","randon"), power_H)
# names<-as.data.frame(nomes)
# names$Var1<-as.character(names$Var1)
# str(names)
# a<-c()
# for(i in 1:12){
# 	a<-c(a, paste(as.character(nomes[i,1]),"_power_", as.character(nomes[i,2]), sep= "", collapse = ""))
# }
# a<-c(a,"complementarity","power_L")
# colnames(RESULTADOS)<-a
# head(RESULTADOS)


RESULTADOS <- matrix(NA, runs * n_complementarity * n_niveis, 7)
colnames(RESULTADOS) <- c("robustness_distinc","robustness_trait","robustness_randon", "runs", "power_H", "complementarity", "power_L")

contagem<-0
WEB<-vector("list", runs * n_complementarity * n_niveis)
for (p in 1:n_complementarity) {
	for (o in 1:n_niveis) {
		for (m in 1:runs) {
			contagem <- contagem+1
			n_spe_H <- sample(10:20, 1)
			n_spe_H
			n_spe_L <- sample(10:20, 1)
			n_spe_L
			tree_H <-sim.bdtree(b = 0.1,d = 0,stop = "taxa",n = n_spe_H, extinct = FALSE)
			for (y in 1:length(tree_H$edge.length)) {
				if (tree_H$edge.length[y] == 0.00000000)
					tree_H$edge.length[y] = 0.01
			}
			#	plot(tree_H)
			tree_L <-sim.bdtree(b = 0.1,d = 0,stop = "taxa",n = n_spe_L,extinct = FALSE)
			for (y in 1:length(tree_L$edge.length)) {
				if (tree_L$edge.length[y] == 0.00000000)
					tree_L$edge.length[y] = 0.01
			}
			#	plot(tree_L)
			tree_H$tip.label = sprintf("H_%.3d", 1:length(tree_H$tip.label))
			tree_L$tip.label = sprintf("L_%.3d", 1:length(tree_L$tip.label))
			trait_H <- matrix(NA, n_spe_H, 1)
			for (n in 1:1) {
				trait_H[, n] <-rTraitCont(compute.brlen(tree_H, power = power_H[o]),model = "BM")
			}
			trait_H[, 1] <- rescale(trait_H[, 1], c(0, 1))
			rownames(trait_H) <- tree_H$tip.label
			#power_L <- sample(c(0.0001, 1, 2, 3, 4, 5), 1)
			power_L<-5
			trait_L <- matrix(NA, n_spe_L, 1)
			for (n in 1:1) {
				trait_L[, n] <- rTraitCont(compute.brlen(tree_L, power = power_L), model = "BM")
			}
			trait_L[, 1] <- rescale(trait_L[, 1], c(0, 1))
			rownames(trait_L) <- tree_L$tip.label
			d_H <- matrix(runif(n_spe_H, max = complementarity[p]), n_spe_H, 1)
			d_L <- matrix(runif(n_spe_L, max = complementarity[p]), n_spe_L, 1)
			web <- matrix(NA, n_spe_L, n_spe_H)
			for (i in 1:n_spe_L) {
				for (j in 1:n_spe_H) {
					II <- abs(trait_H[j] - trait_L[i])
					III <- 0.5 * (d_H[j] + d_L[i])
					web[i, j] <- ifelse(II < III, 1, 0)
				}
			}
			colnames(web) <- tree_H$tip.label
			rownames(web) <- tree_L$tip.label
			# par(mar=c(0.4,0.4,0.4,0.4))
			# layout(matrix(c(0,0,1,0,0,2,3,4,5),3,3,byrow=T), widths=c(0.4,0.4,1),heights=c(0.4,0.4,1))
			# plot(tree_H,show.tip.label=F, direction="downwards")
			# barplot(trait_H[,1],beside=T, axes=F)
			# plot(tree_L,show.tip.label=F)
			# barplot(trait_L[,1],beside=T,horiz=T,axes=F)
			# color2D.matplot(web,ylab="",xlab="", yrev=F,cs1=c(1,0),cs2=c(1,0),cs3=c(1,0),border="white",xaxt = "n", yaxt = "n",axes=F)
			z_H <- which(colSums(web) == 0)
			if (length(z_H) > 0) {
				for (i in 1:length(z_H)) {
					web[sample(1:n_spe_L, 1), z_H[i]] <- 1
				}
			}
			z_L <- which(rowSums(web) == 0)
			if (length(z_L) > 0) {
				for (i in 1:length(z_L)) {
					web[z_L[i], sample(1:n_spe_H, 1)] <- 1
				}
			}
			#par(mar=c(0.4,0.4,0.4,0.4))
			#layout(matrix(c(0,0,1,0,0,2,3,4,5),3,3,byrow=T), widths=c(0.4,0.4,1),heights=c(0.4,0.4,1))
			#plot(tree_H,show.tip.label=F, direction="downwards")
			#barplot(trait_H[,1],beside=T, axes=F)
			#plot(tree_L,show.tip.label=F)
			#barplot(trait_L[,1],beside=T,horiz=T,axes=F)
			#color2D.matplot(web,ylab="",xlab="", yrev=F,cs1=c(1,0),cs2=c(1,0),cs3=c(1,0), border="white",xaxt = "n", yaxt = "n",axes=F)
			
			dis_trait_H <- vegdist(trait_H, method = "euclidean")
			clu_H <- hclust(dis_trait_H, method = "ward.D")
			distinc <- evol.distinct(as.phylo(clu_H), type = "fair.proportion")
			distinc
			distinc.order <- distinc[order(distinc[, 2], decreasing = TRUE),]
			#distinc.order$Order<-1:length(tree_H$tip.label)
			distinc.order
			extinct.col <- match(as.character(distinc.order[, 1]), colnames(web))
			#extinct.col<-distinc.order[match(colnames(web),as.character(distinc.order[,1])),3]
			extinct.col
		
			trait.order <-trait_H[order(trait_H[, 1, drop = FALSE], decreasing = TRUE), , drop = FALSE]
			trait.col <- match(row.names(trait.order), colnames(web))
			
			test_hig_distinc <-second.extinct(web,participant = "higher",method = "external",nrep = 1,details = FALSE,ext.col = extinct.col)
			test_hig_trait <-second.extinct(web,participant = "higher",method = "external",nrep = 1,details = FALSE,ext.col = trait.col)
			test_hig_randon <-second.extinct(web,participant = "higher",method = "random",nrep = 1,details = FALSE)
			
			# RESULTADOS[(p * runs) - (runs - m), ((o*3)-2)] <- robustness(test_hig_distinc)
			# RESULTADOS[(p * runs) - (runs - m), ((o*3)-1)] <- robustness(test_hig_trait)
			# RESULTADOS[(p * runs) - (runs - m), ((o*3)-0)] <- robustness(test_hig_randon)
			# RESULTADOS[(p * runs) - (runs - m), 13] <- complementarity[p]
			# RESULTADOS[(p * runs) - (runs - m), 14] <- power_L
			
			
			RESULTADOS[contagem, 1] <- robustness(test_hig_distinc)
			RESULTADOS[contagem, 2] <- robustness(test_hig_trait)
			RESULTADOS[contagem, 3] <- robustness(test_hig_randon)
			
			RESULTADOS[contagem, 4] <- m
			RESULTADOS[contagem, 5] <- power_H[o]
			RESULTADOS[contagem, 6] <- complementarity[p]
			RESULTADOS[contagem, 7] <- power_L
			
			
			WEB_temp<-list(matrix(c(m,power_H[o],complementarity[p], power_L),1,4,dimnames = list(c("names"),c("runs", "power_H", "complementarity","power_L"))), web)
			
			# paste("Web_",m,"_Power_",power_H[o],"_Comple_",complementarity[p],".txt",sep = ""), row.names = FALSE, col.names = FALSE)
			
			#WEB[[(p * runs) - (runs - m)]]<-WEB_temp
			WEB[[contagem]]<-WEB_temp
			#(p * runs) - (runs - m)
			
			print(contagem)
			
			#write.table(web, paste("Web_",m,"_Power_",power_H[o],"_Comple_",complementarity[p],".txt",sep = ""), row.names = FALSE, col.names = FALSE)
			#layout(1)
			#par(mar=c(4.5,4.5,3,3))
			#slope.bipartite(test_hig)
		}
	}
}


# results:
RESULTADOS
WEB

# Calculate Nestedness and modularity of networks saved in the list WEB

RESULTADOS_INDEX<-matrix(NA,length(WEB),6)
colnames(RESULTADOS_INDEX)<-c(colnames(WEB[[1]][[1]]),"NODF2", "mod")
RESULTADOS_INDEX
for(i in 1:length(WEB)){
	RESULTADOS_INDEX[i, 1:4] <-WEB[[i]][[1]]
	RESULTADOS_INDEX[i, 5] <-nested(WEB[[i]][[2]],method = "NODF2")
	log <- capture.output(mod<-computeModules(WEB[[i]][[2]], steps=1E6))
	if(!is.null(mod)){
		RESULTADOS_INDEX[i, 6]<-mod@likelihood
	}
}

RESULTADOS_INDEX
##Saving results
# save.image("workspace_2017_07_26")
# write.table(RESULTADOS,"RESULTADOS.txt")
# write.table(RESULTADOS_INDEX,"RESULTADOS_INDEX.txt")


##############################################################
##save each set of simulations
#RESULTADOS_NS<-RESULTADOS
#RESULTADOS_BM<-RESULTADOS
#RESULTADOS_FS<-RESULTADOS
#RESULTADOS_FS5<-RESULTADOS

## Code for the second set of simulations, comparing network robustness, modularity and nestedeness
runs=1000
n_niveis<-4
power_H=c(0.0001,1,2,5)
power_L=sample(c(0.0001,1,2,5),1)
aninhamento<-matrix(NA,runs,n_niveis)
modularidade<-matrix(NA,runs,n_niveis)
robustez<-matrix(NA,runs,n_niveis)
for(o in 1:n_niveis)
  for(m in 1:runs){
    n_spe_H<-sample(10:20,1)
    n_spe_H
    n_spe_L<-sample(10:20,1)
    n_spe_L
    tree_H<-sim.bdtree(b=0.1,d=0,stop="taxa",n=n_spe_H, extinct=FALSE) 
    for (y in 1: length(tree_H$edge.length)) {
      if (tree_H$edge.length[y] == 0.00000000) 
        tree_H$edge.length[y] = 0.01
    }
    tree_L<-sim.bdtree(b=0.1,d=0,stop="taxa",n=n_spe_L, extinct=FALSE) 
    for (y in 1: length(tree_L$edge.length)) {
      if (tree_L$edge.length[y] == 0.00000000) 
        tree_L$edge.length[y] = 0.01
    }
    tree_H$tip.label=sprintf("H_%.3d",1:length(tree_H$tip.label))	
    tree_L$tip.label=sprintf("L_%.3d",1:length(tree_L$tip.label))	
    trait_H<-matrix(NA,n_spe_H,1)
    for(n in 1:1){
      trait_H[,n]<-rTraitCont(compute.brlen(tree_H,power=power_H[o]),model="BM")
    }
    trait_H[,1]<-rescale(trait_H[,1],c(0,1))
    rownames(trait_H)<-tree_H$tip.label
    trait_L<-matrix(NA,n_spe_L,1)
    for(n in 1:1){
      trait_L[,n]<-rTraitCont(compute.brlen(tree_L,power=power_L),model="BM")
    }
    trait_L[,1]<-rescale(trait_L[,1],c(0,1))
    rownames(trait_L)<-tree_L$tip.label
    d_H<-matrix(runif(n_spe_H,max=0.25), n_spe_H,1)
    d_L<-matrix(runif(n_spe_L,max=0.25), n_spe_L,1)
    web<-matrix(NA,n_spe_L,n_spe_H)
    for(i in 1: n_spe_L){
      for(j in 1: n_spe_H){
        II<-abs(trait_H[j]-trait_L[i])
        III<-0.5*(d_H[j]+d_L[i])
        web[i,j]<-ifelse(II<III,1,0)
      }
    }
    colnames(web)<-tree_H$tip.label
    rownames(web)<-tree_L$tip.label
    
    z_H<-which(colSums(web)==0)
    if(length(z_H)>0){
      for(i in 1:length(z_H)){
        web[sample(1:n_spe_L,1),z_H[i]]<-1
      }
    }
    z_L<-which(rowSums(web)==0)
    if(length(z_L)>0){
      for(i in 1:length(z_L)){
        web[z_L[i],sample(1:n_spe_H,1)]<-1
      }
    }
    dis_trait_H<-vegdist(trait_H,method="euclidean")
    clu_H<-hclust(dis_trait_H,method="ward")
    distinc<-evol.distinct(as.phylo(clu_H),type ="fair.proportion")
    distinc
    
    distinc.order<-distinc[order(distinc[,2], decreasing = TRUE), ]
    #distinc.order$Order<-1:length(tree_H$tip.label)
    distinc.order
    extinct.col<-match(as.character(distinc.order[,1]),colnames(web))
    #extinct.col<-distinc.order[match(colnames(web),as.character(distinc.order[,1])),3]
    extinct.col
    test_hig<-second.extinct(web, participant="higher", method="external", nrep=1,details=FALSE,ext.col=extinct.col)
    test_hig
    robustez[m,o]<-robustness(test_hig)
    aninhamento[m,o]<-nested(web,method = "NODF2")
    mod=computeModules(web, steps=1E6)
    if(!is.null(mod)){
      modularidade[m,o]<-mod@likelihood
    }else{
      i=i-1
      l=l-1
    }
  }
  
